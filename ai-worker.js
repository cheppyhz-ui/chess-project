// =====================================================================
// === AI WORKER - VERSI FINAL DENGAN PERBAIKAN BUG REKURSI ==========
// =====================================================================

// --- KONSTANTA DAN FUNGSI LOGIKA CATUR ---
const nilaiBidak = { 'p': 100, 'n': 320, 'b': 330, 'r': 500, 'q': 900, 'k': 20000 };
const pieceSquareTables = {
    'p': [[0,0,0,0,0,0,0,0],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]],'n': [[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,0,0,0,-20,-40],[-30,0,10,15,15,10,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,10,15,15,10,5,-30],[-40,-20,0,5,5,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]],'b': [[-20,-10,-10,-10,-10,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,10,10,5,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,10,10,10,10,0,-10],[-10,10,10,10,10,10,10,-10],[-10,5,0,0,0,0,5,-10],[-20,-10,-10,-10,-10,-10,-10,-20]],'r': [[0,0,0,0,0,0,0,0],[5,10,10,10,10,10,10,5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[0,0,0,5,5,0,0,0]],'q': [[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,5,5,5,0,-10],[-5,0,5,5,5,5,0,-5],[0,0,5,5,5,5,0,-5],[-10,5,5,5,5,5,0,-10],[-10,0,5,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]],'k': [[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-20,-30,-30,-40,-40,-30,-30,-20],[-10,-20,-20,-20,-20,-20,-20,-10],[20,20,0,0,0,0,20,20],[20,30,10,0,0,10,30,20]]
};
function evaluasiPapan(papan) { let skorTotal=0,jumlahGajahPutih=0,jumlahGajahHitam=0;let pionPutihPerLajur=Array(8).fill(0),pionHitamPerLajur=Array(8).fill(0);let lajurPionPutih=Array(8).fill(false),lajurPionHitam=Array(8).fill(false);for(let i=0;i<8;i++)for(let j=0;j<8;j++){const bidak=papan[i][j];if(bidak==='p'){pionHitamPerLajur[j]++;lajurPionHitam[j]=true}else if(bidak==='P'){pionPutihPerLajur[j]++;lajurPionPutih[j]=true}}for(let i=0;i<8;i++)for(let j=0;j<8;j++){const bidak=papan[i][j];if(bidak!==' '){const jenisBidak=bidak.toLowerCase(),skorBidak=nilaiBidak[jenisBidak],isPutih=bidak===bidak.toUpperCase();const pst=pieceSquareTables[jenisBidak],skorPosisi=isPutih?pst[i][j]:pst[7-i][j];let bonusTambahan=0;if(jenisBidak==='b'){if(isPutih)jumlahGajahPutih++;else jumlahGajahHitam++}if(jenisBidak==='r'){if(!lajurPionPutih[j])bonusTambahan+=15;if(!lajurPionHitam[j])bonusTambahan+=isPutih?0:15}if(jenisBidak==='p'){const penaltiStruktur=20;if((isPutih&&pionPutihPerLajur[j]>1)||(!isPutih&&pionHitamPerLajur[j]>1))bonusTambahan-=penaltiStruktur;const lajurKiri=j>0?j-1:-1,lajurKanan=j<7?j+1:-1;if((isPutih&&(lajurKiri===-1||!lajurPionPutih[lajurKiri])&&(lajurKanan===-1||!lajurPionPutih[lajurKanan]))||(!isPutih&&(lajurKiri===-1||!lajurPionHitam[lajurKiri])&&(lajurKanan===-1||!lajurPionHitam[lajurKanan])))bonusTambahan-=penaltiStruktur;let isBebas=true;if(isPutih){for(let k=i-1;k>=0;k--)if(papan[k][j]==='p'||(j>0&&papan[k][j-1]==='p')||(j<7&&papan[k][j+1]==='p')){isBebas=false;break}}else{for(let k=i+1;k<8;k++)if(papan[k][j]==='P'||(j>0&&papan[k][j-1]==='P')||(j<7&&papan[k][j+1]==='P')){isBebas=false;break}}if(isBebas){const bonusPionBebas=[0,80,60,40,30,20,10,0];bonusTambahan+=isPutih?bonusPionBebas[i]:bonusPionBebas[7-i]}}skorTotal+=(skorBidak+skorPosisi+bonusTambahan)*(isPutih?1:-1)}}if(jumlahGajahPutih>=2)skorTotal+=50;if(jumlahGajahHitam>=2)skorTotal-=50;return skorTotal }
function quiescenceSearch(papan, alpha, beta, isMaximizingPlayer, kedalaman, status) { if (kedalaman === 0) return evaluasiPapan(papan); const stand_pat = evaluasiPapan(papan); if (isMaximizingPlayer) { if (stand_pat >= beta) return beta; if (stand_pat > alpha) alpha = stand_pat; const gerakanMakan = getAllGerakanMungkin('putih', papan, true, status); for (const gerakan of gerakanMakan) { const [barisAsal, kolomAsal] = gerakan.asal, [barisTujuan, kolomTujuan] = gerakan.tujuan; const bidakAsal = papan[barisAsal][kolomAsal], bidakTujuan = papan[barisTujuan][kolomTujuan]; papan[barisTujuan][kolomTujuan] = bidakAsal; papan[barisAsal][kolomAsal] = ' '; const skor = quiescenceSearch(papan, alpha, beta, false, kedalaman - 1, status); papan[barisAsal][kolomAsal] = bidakAsal; papan[barisTujuan][kolomTujuan] = bidakTujuan; if (skor >= beta) return beta; if (skor > alpha) alpha = skor; } return alpha; } else { if (stand_pat <= alpha) return alpha; if (stand_pat < beta) beta = stand_pat; const gerakanMakan = getAllGerakanMungkin('hitam', papan, true, status); for (const gerakan of gerakanMakan) { const [barisAsal, kolomAsal] = gerakan.asal, [barisTujuan, kolomTujuan] = gerakan.tujuan; const bidakAsal = papan[barisAsal][kolomAsal], bidakTujuan = papan[barisTujuan][kolomTujuan]; papan[barisTujuan][kolomTujuan] = bidakAsal; papan[barisAsal][kolomAsal] = ' '; const skor = quiescenceSearch(papan, alpha, beta, true, kedalaman - 1, status); papan[barisAsal][kolomAsal] = bidakAsal; papan[barisTujuan][kolomTujuan] = bidakTujuan; if (skor <= alpha) return alpha; if (skor < beta) beta = skor; } return beta; } }
function minimax(papan, kedalaman, alpha, beta, isMaximizingPlayer, quiescence, status) { if (kedalaman === 0) { return quiescenceSearch(papan, alpha, beta, isMaximizingPlayer, quiescence, status); } const warna = isMaximizingPlayer ? 'putih' : 'hitam'; const semuaGerakan = getAllGerakanMungkin(warna, papan, false, status); if (semuaGerakan.length === 0) { return isRajaSkak(warna, papan, status) ? (isMaximizingPlayer ? -Infinity : Infinity) : 0; } if (isMaximizingPlayer) { let maxEval = -Infinity; for (const gerakan of semuaGerakan) { const [barisAsal, kolomAsal] = gerakan.asal, [barisTujuan, kolomTujuan] = gerakan.tujuan; const bidakAsal = papan[barisAsal][kolomAsal], bidakTujuan = papan[barisTujuan][kolomTujuan]; papan[barisTujuan][kolomTujuan] = bidakAsal; papan[barisAsal][kolomAsal] = ' '; let evaluasi = minimax(papan, kedalaman - 1, alpha, beta, false, quiescence, status); papan[barisAsal][kolomAsal] = bidakAsal; papan[barisTujuan][kolomTujuan] = bidakTujuan; maxEval = Math.max(maxEval, evaluasi); alpha = Math.max(alpha, evaluasi); if (beta <= alpha) break; } return maxEval; } else { let minEval = Infinity; for (const gerakan of semuaGerakan) { const [barisAsal, kolomAsal] = gerakan.asal, [barisTujuan, kolomTujuan] = gerakan.tujuan; const bidakAsal = papan[barisAsal][kolomAsal], bidakTujuan = papan[barisTujuan][kolomTujuan]; papan[barisTujuan][kolomTujuan] = bidakAsal; papan[barisAsal][kolomAsal] = ' '; let evaluasi = minimax(papan, kedalaman - 1, alpha, beta, true, quiescence, status); papan[barisAsal][kolomAsal] = bidakAsal; papan[barisTujuan][kolomTujuan] = bidakTujuan; minEval = Math.min(minEval, evaluasi); beta = Math.min(beta, evaluasi); if (beta <= alpha) break; } return minEval; } }
function getAllGerakanMungkin(warna, papan, hanyaMakan = false, status) { const gerakan = []; for (let i = 0; i < 8; i++) for (let j = 0; j < 8; j++) { const bidak = papan[i][j]; if (bidak !== ' ') { const isPutih = bidak === bidak.toUpperCase(); if ((warna === 'putih' && isPutih) || (warna === 'hitam' && !isPutih)) { let gerakanSahUntukBidak = filterGerakanSkak(getGerakanSah(bidak, i, j, papan, status), i, j, papan, status); if (hanyaMakan) { gerakanSahUntukBidak = gerakanSahUntukBidak.filter(g => papan[g[0]][g[1]] !== ' '); } gerakanSahUntukBidak.forEach(g => gerakan.push({ asal: [i, j], tujuan: g })); } } } return gerakan; }
function cariGerakanTerbaik({ papan, warnaAI, kedalaman, quiescence, status }) { const isAIWhite = (warnaAI === 'putih'); let gerakanTerbaik = null, nilaiTerbaik = isAIWhite ? -Infinity : Infinity; const semuaGerakan = getAllGerakanMungkin(warnaAI, papan, false, status); semuaGerakan.sort(() => Math.random() - 0.5); for (const gerakan of semuaGerakan) { const [barisAsal, kolomAsal] = gerakan.asal, [barisTujuan, kolomTujuan] = gerakan.tujuan; const bidakAsal = papan[barisAsal][kolomAsal], bidakTujuan = papan[barisTujuan][kolomTujuan]; papan[barisTujuan][kolomTujuan] = bidakAsal; papan[barisAsal][kolomAsal] = ' '; let nilai = minimax(papan, kedalaman - 1, -Infinity, Infinity, !isAIWhite, quiescence, status); papan[barisAsal][kolomAsal] = bidakAsal; papan[barisTujuan][kolomTujuan] = bidakTujuan; if (isAIWhite) { if (nilai > nilaiTerbaik) { nilaiTerbaik = nilai; gerakanTerbaik = gerakan; } } else { if (nilai < nilaiTerbaik) { nilaiTerbaik = nilai; gerakanTerbaik = gerakan; } } } return gerakanTerbaik; }
function isKawan(b1, b2) { if (b1 === ' ' || b2 === ' ') return false; return (b1.toUpperCase() === b1) === (b2.toUpperCase() === b2); }
function getGerakanLurus(r, c, p, a) { const g = []; const b = p[r][c]; a.forEach(([dr, dc]) => { let cr = r + dr, cc = c + dc; while (cr >= 0 && cr < 8 && cc >= 0 && cc < 8) { const t = p[cr][cc]; if (t === ' ') g.push([cr, cc]); else { if (!isKawan(b, t)) g.push([cr, cc]); break; } cr += dr; cc += dc; } }); return g; }
function getGerakanPion(r, c, p) { const g = []; const b = p[r][c]; const a = (b === 'P') ? -1 : 1; const sr = (b === 'P') ? 6 : 1; if (p[r+a] && p[r+a][c] === ' ') { g.push([r+a, c]); if (r === sr && p[r+2*a] && p[r+2*a][c] === ' ') g.push([r+2*a, c]); } [c-1, c+1].forEach(tc => { if (tc >= 0 && tc < 8 && p[r+a]) { const bl = p[r+a][tc]; if (bl && bl !== ' ' && !isKawan(b, bl)) g.push([r+a, tc]); } }); return g; }
function getGerakanKuda(r, c, p) { const g = []; const b = p[r][c]; const m = [[-2,1],[-2,-1],[2,1],[2,-1],[-1,2],[-1,-2],[1,2],[-1,-2]]; m.forEach(([dr, dc]) => { const tr = r+dr, tc = c+dc; if (tr>=0&&tr<8&&tc>=0&&tc<8) if (!isKawan(b, p[tr][tc])) g.push([tr, tc]); }); return g; }
function getGerakanBenteng(r, c, p) { return getGerakanLurus(r,c,p,[[-1,0],[1,0],[0,-1],[0,1]]); }
function getGerakanGajah(r, c, p) { return getGerakanLurus(r,c,p,[[-1,-1],[-1,1],[1,-1],[1,1]]); }
function getGerakanRatu(r, c, p) { return [...getGerakanBenteng(r, c, p), ...getGerakanGajah(r, c, p)]; }
function getGerakanRaja(r, c, p, statusGerakan) { const g = []; const b = p[r][c]; const w = (b === 'K') ? 'putih' : 'hitam'; [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]].forEach(([dr, dc]) => { const tr = r+dr, tc = c+dc; if (tr>=0&&tr<8&&tc>=0&&tc<8) if (!isKawan(b, p[tr][tc])) g.push([tr, tc]); }); if (!isRajaSkak(w, p, statusGerakan)) { if (w==='putih') { if (!statusGerakan.K&&!statusGerakan.R_h1&&p[7][5]===' '&&p[7][6]===' '&&!isKotakDiserang(7,5,'hitam',p,statusGerakan)&&!isKotakDiserang(7,6,'hitam',p,statusGerakan)) g.push([7,6]); if (!statusGerakan.K&&!statusGerakan.R_a1&&p[7][1]===' '&&p[7][2]===' '&&p[7][3]===' '&&!isKotakDiserang(7,2,'hitam',p,statusGerakan)&&!isKotakDiserang(7,3,'hitam',p,statusGerakan)) g.push([7,2]); } else { if (!statusGerakan.k&&!statusGerakan.r_h8&&p[0][5]===' '&&p[0][6]===' '&&!isKotakDiserang(0,5,'putih',p,statusGerakan)&&!isKotakDiserang(0,6,'putih',p,statusGerakan)) g.push([0,6]); if (!statusGerakan.k&&!statusGerakan.r_a8&&p[0][1]===' '&&p[0][2]===' '&&p[0][3]===' '&&!isKotakDiserang(0,2,'putih',p,statusGerakan)&&!isKotakDiserang(0,3,'putih',p,statusGerakan)) g.push([0,2]); } } return g; }
function getGerakanSah(b, r, c, p, s) { switch (b.toLowerCase()) { case 'p': return getGerakanPion(r, c, p); case 'n': return getGerakanKuda(r, c, p); case 'r': return getGerakanBenteng(r, c, p); case 'b': return getGerakanGajah(r, c, p); case 'q': return getGerakanRatu(r, c, p); case 'k': return getGerakanRaja(r, c, p, s); default: return []; } }
function isRajaSkak(wr, p, s) { let rr, cr; const sr = (wr === 'putih') ? 'K' : 'k'; for (let i = 0; i < 8; i++) { for (let j = 0; j < 8; j++) if (p[i][j] === sr) { rr = i; cr = j; break; } if (rr !== undefined) break; } if (rr === undefined) return false; return isKotakDiserang(rr, cr, (wr === 'putih' ? 'hitam' : 'putih'), p, s); }
function filterGerakanSkak(sg, bar, bac, papan, status) { const ba = papan[bar][bac]; const wb = (ba.toUpperCase() === ba) ? 'putih' : 'hitam'; return sg.filter(g => { const [bt, bc] = g; const ps = papan.map(b => b.slice()); ps[bt][bc] = ba; ps[bar][bac] = ' '; return !isRajaSkak(wb, ps, status); }); }

// --- FUNGSI isKotakDiserang YANG SUDAH DIPERBAIKI ---
function isKotakDiserang(baris, kolom, warnaPenyerang, papan, statusGerakan) {
    for (let i = 0; i < 8; i++) for (let j = 0; j < 8; j++) {
        const bidak = papan[i][j];
        if (bidak === ' ') continue;
        const isPenyerangPutih = (warnaPenyerang === 'putih'), isBidakPutih = (bidak.toUpperCase() === bidak);
        if ((isPenyerangPutih && isBidakPutih) || (!isPenyerangPutih && !isBidakPutih)) {
            const jenisBidak = bidak.toLowerCase();
            if (jenisBidak === 'p') {
                const arahSerang = isPenyerangPutih ? -1 : 1;
                if (i + arahSerang === baris && (j - 1 === kolom || j + 1 === kolom)) return true;
            } else if (jenisBidak === 'k') {
                 const gerakanSekitar = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];
                 for(const [dr, dc] of gerakanSekitar) {
                     if (i + dr === baris && j + dc === kolom) return true;
                 }
            } else {
                const gerakan = getGerakanSah(bidak, i, j, papan, statusGerakan);
                if (gerakan.some(g => g[0] === baris && g[1] === kolom)) return true;
            }
        }
    }
    return false;
}

// --- PENDENGAR PESAN DARI THREAD UTAMA ---
self.onmessage = function(e) {
    const { papan, warnaAI, kedalaman, quiescence, status } = e.data;
    const gerakanTerbaik = cariGerakanTerbaik({ papan, warnaAI, kedalaman, quiescence, status });
    self.postMessage(gerakanTerbaik);
};